{"ast":null,"code":"import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nimport API from \"../../../services/API\";\n\n//login\nexport const userLogin = createAsyncThunk(\"auth/login\", async ({\n  email,\n  password,\n  role,\n  history\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const {\n      data\n    } = await API.post(\"/auth/login\", {\n      role,\n      email,\n      password\n    });\n    // store token\n    if (data.success) {\n      localStorage.setItem(\"token\", data.token);\n      toast.success(data.message);\n      history(\"/home\");\n    }\n    return data;\n  } catch (error) {\n    if (error.response && error.response.data.message) {\n      return rejectWithValue(error.response.data.message);\n    } else {\n      alert(\"error accrued\");\n      return rejectWithValue(error.message);\n    }\n  }\n});\n\n// register\nexport const userRegister = createAsyncThunk(\"auth/register\", async ({\n  name,\n  role,\n  email,\n  password,\n  phone,\n  organisationName,\n  address,\n  hospitalName,\n  website,\n  history\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const {\n      data\n    } = await API.post(\"/auth/register\", {\n      name,\n      role,\n      email,\n      password,\n      phone,\n      organisationName,\n      address,\n      hospitalName,\n      website\n    });\n    if (data !== null && data !== void 0 && data.success) {\n      toast.success(data.message);\n      history(\"/login\"); // Use history for navigation\n      return data;\n    } else {\n      console.error(\"Unexpected response data:\", data);\n      return rejectWithValue(\"Unexpected response data\");\n    }\n  } catch (error) {\n    console.error(\"Registration error:\", error);\n    if (error.response && error.response.data.message) {\n      return rejectWithValue(error.response.data.message);\n    } else {\n      alert(\"Error occurred while registering\");\n      return rejectWithValue(error.message);\n    }\n  }\n});\n\n// get current user\nexport const getcurrentUser = createAsyncThunk(\"auth/getcurrentUser\", async ({\n  rejectWithValue\n}) => {\n  try {\n    const res = await API.get(\"/auth/currentuser\");\n    if (res !== null && res !== void 0 && res.data) {\n      return res === null || res === void 0 ? void 0 : res.data;\n    }\n  } catch (error) {\n    console.log(error);\n    if (error.response && error.response.data.message) {\n      return rejectWithValue(error.response.data.message);\n    } else {\n      return rejectWithValue(error.message);\n    }\n  }\n});","map":{"version":3,"names":["createAsyncThunk","toast","API","userLogin","email","password","role","history","rejectWithValue","data","post","success","localStorage","setItem","token","message","error","response","alert","userRegister","name","phone","organisationName","address","hospitalName","website","console","getcurrentUser","res","get","log"],"sources":["C:/Users/Tejas/Downloads/project test/Blood-Bank-App/client/src/redux/features/auth/authActions.js"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { toast } from \"react-toastify\";\r\nimport API from \"../../../services/API\";\r\n\r\n//login\r\nexport const userLogin = createAsyncThunk(\r\n  \"auth/login\",\r\n  async ({ email, password, role, history }, { rejectWithValue }) => {\r\n    try {\r\n      const { data } = await API.post(\"/auth/login\", { role, email, password });\r\n      // store token\r\n      if (data.success) {\r\n        localStorage.setItem(\"token\", data.token);\r\n        toast.success(data.message);\r\n        history(\"/home\");\r\n      }\r\n      return data;\r\n    } catch (error) {\r\n      if (error.response && error.response.data.message) {\r\n        return rejectWithValue(error.response.data.message);\r\n      } else {\r\n        alert(\"error accrued\");\r\n        return rejectWithValue(error.message);\r\n      }\r\n    }\r\n  }\r\n);\r\n\r\n// register\r\nexport const userRegister = createAsyncThunk(\r\n  \"auth/register\",\r\n  async (\r\n    {\r\n      name,\r\n      role,\r\n      email,\r\n      password,\r\n      phone,\r\n      organisationName,\r\n      address,\r\n      hospitalName,\r\n      website,\r\n      history,\r\n    },\r\n    { rejectWithValue }\r\n  ) => {\r\n    try {\r\n      const { data } = await API.post(\"/auth/register\", {\r\n        name,\r\n        role,\r\n        email,\r\n        password,\r\n        phone,\r\n        organisationName,\r\n        address,\r\n        hospitalName,\r\n        website,\r\n      });\r\n\r\n      if (data?.success) {\r\n        toast.success(data.message);\r\n        history(\"/login\"); // Use history for navigation\r\n        return data;\r\n      } else {\r\n        console.error(\"Unexpected response data:\", data);\r\n        return rejectWithValue(\"Unexpected response data\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Registration error:\", error);\r\n\r\n      if (error.response && error.response.data.message) {\r\n        return rejectWithValue(error.response.data.message);\r\n      } else {\r\n        alert(\"Error occurred while registering\");\r\n        return rejectWithValue(error.message);\r\n      }\r\n    }\r\n  }\r\n);\r\n\r\n// get current user\r\nexport const getcurrentUser = createAsyncThunk(\r\n  \"auth/getcurrentUser\",\r\n  async ({ rejectWithValue }) => {\r\n    try {\r\n      const res = await API.get(\"/auth/currentuser\");\r\n      if (res?.data) {\r\n        return res?.data;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      if (error.response && error.response.data.message) {\r\n        return rejectWithValue(error.response.data.message);\r\n      } else {\r\n        return rejectWithValue(error.message);\r\n      }\r\n    }\r\n  }\r\n);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}